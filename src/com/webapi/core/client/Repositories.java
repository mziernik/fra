package com.webapi.core.client;

import com.model.repository.Column;
import com.model.repository.Repository;
import com.servlet.requests.HttpRequest;
import com.utils.text.NameFormat;
import com.utils.text.StrWriter;
import com.webapi.core.WebApi;
import com.webapi.core.WebApiController;

/**
 *
 * @author milosz
 */
public class Repositories extends WebApiClientBuilder {

    public Repositories(WebApiController controller, StrWriter writer) {
        super(controller, writer);
    }

    @Override
    public void build(HttpRequest http, Class<? extends WebApi> cls, String parent) {

        build();
    }

    @Override
    public void build() {
        writer.setAutoIntent(true);

        writer.append("import {Field, DataType, Repository, Record} from \"../core/core\";").br().br();

        StrWriter exports = new StrWriter();

        writer.br().br();

        for (Repository<?> repo : Repository.ALL.values()) {

            String name = repo.getClass().getSimpleName();

            String format = new NameFormat().sourceCamelCase(true).upperCase().format(name);
            name += "Repo";

            exports.add("export const ", format, ": ", name, " = Repository.register(new ", name, "());").br();

            writer.add("export class ", name, " extends Repository {").br().br();

            writer.nextLevel(() -> {

                writer.br().append("constructor() {").br();

                writer.nextLevel(() -> {
                    writer.append("super({");

                    writer.nextLevel(() -> {
                        writer.br().add("key: ").escape(repo.getKey()).add(",");
                        writer.br().add("name: ").escape(repo.getName()).add(",");
                        writer.br().add("pk: ").escape(repo.config.primaryKey.config.type.name).add(",");
                        writer.br().add("record: ", repo.getClass().getSimpleName(), ",");

                        if (repo.config.local != null)
                            writer.br().add("local: ").append(repo.config.local).add(",");
                        if (repo.config.readOnly != null)
                            writer.br().add("readOnly: ").append(repo.config.readOnly).add(",");
                        if (repo.config.autoUpdate != null)
                            writer.br().add("autoUpdate: ").append(repo.config.autoUpdate).add(",");
                    });

                });
                writer.br().append("});").br().append("}").br();

//             
            });

            writer.br().append("}").br();
            writer.br();

            writer.append("export class ")
                    .append(repo.getClass().getSimpleName())
                    .append(" extends Record {")
                    .br()
                    .br();

            writer.nextLevel(() -> {

                for (Column<?> col : repo.getColumns().values()) {
                    writer.append(col.getKey().toUpperCase())
                            .append(": Field = new Field({");

                    writer.nextLevel(() -> {
                        writer.br().add("key: ").escape(col.config.key).add(",");
                        writer.br().add("name: ").escape(col.config.name).add(",");
                        writer.br().add("type: ").escape(col.config.type.name).add(",");
                        if (col.config.required != null)
                            writer.br().add("required: ").append(col.config.required).add(",");
                        if (col.config.readOnly != null)
                            writer.br().add("readOnly: ").append(col.config.readOnly).add(",");
                        if (col.config.autoGenerated != null)
                            writer.br().add("autoGenerated: ").append(col.config.autoGenerated).add(",");
                        if (col.config.nonEmpty != null)
                            writer.br().add("nonEmpty: ").append(col.config.nonEmpty).add(",");
                        if (col.config.unique != null)
                            writer.br().add("unique: ").append(col.config.unique).add(",");
                        if (col.config.caseConvert != null)
                            writer.br().add("caseConvert: ").escape(col.config.caseConvert.name().toCharArray()).add(",");
                        if (col.config.align != null)
                            writer.br().add("align: ").escape(col.config.align.name().toLowerCase()).add(",");
                        if (col.config.regex != null)
                            writer.br().add("regex: ").escape(col.config.regex).add(",");
                        if (col.config.min != null)
                            writer.br().add("min: ").append(col.config.min).add(",");
                        if (col.config.max != null)
                            writer.br().add("max: ").append(col.config.max).add(",");

                        if (col.config.description != null)
                            writer.br().add("description: ").escape(col.config.description).add(",");
                    });

                    writer.br().add("});").br().br(); //ID: Field = new Field(DataType.INT).primaryKey();
                }

                writer.br().append("constructor() {").br();

                writer.nextLevel(() -> {
                    writer.append("super(...arguments);").br()
                            .append("this.init();").br();
                });

                writer.append("};").br().br();
            });
//          
            writer.br().append("}").br();
            writer.br();
        }

        writer.append(exports.toString());
    }

}
