package com.model;

import com.model.dao.core.DAOQuery;
import com.model.repository.Column;
import com.model.repository.Record;
import com.model.repository.Repository;
import com.model.repository.intf.CRUDE;
import com.servlet.websocket.WebSocketConnection;
import com.servlet.websocket.WebSocketController;
import com.thread.ThreadObject;
import com.utils.Utils;
import com.utils.collections.Pair;
import com.utils.collections.Strings;
import com.utils.collections.TList;
import com.utils.date.TDate;
import com.utils.reflections.datatype.*;
import com.webapi.core.WebApiController;
import com.webapi.core.WebApiRequest;
import java.util.LinkedHashMap;
import java.util.List;

public class RRepoHistory extends Repository<Integer> {
    
    public static RRepoHistory instance;
    
    public final static Column<Integer> ID = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.INT;
        c.key = "id";
        c.name = "ID";
        c.required = true;
        c.autoGenerated = true;
        c.readOnly = true;
        c.unique = true;
    });
    
    public final static Column<TDate> DATE = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.TIMESTAMP;
        c.key = "date";
        c.name = "Data";
        c.required = true;
        c.readOnly = true;
    });
    
    public final static Column<String> NAME = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.STRING;
        c.key = "name";
        c.name = "Nazwa";
        c.required = true;
        c.readOnly = true;
    });
    
    public final static Column<String> REPOSITORY = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.STRING;
        c.key = "repository";
        c.name = "Repozytorium";
        c.required = true;
        c.readOnly = true;
    });
    
    public final static Column<String> PRIMARY_KEY = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.STRING;
        c.key = "primaryKey";
        c.name = "Klucz główny";
        c.daoName = "primary_key";
        c.required = true;
        c.readOnly = true;
    });
    
    public final static Column<CRUDE> ACTION = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = EnumDataType.ofEnum(CRUDE.class);
        c.key = "action";
        c.name = "Akcja";
        c.required = true;
        c.readOnly = true;
    });
    
    public final static Column<LinkedHashMap<String, Pair<String, String>>> CHANGES = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = new MapDataType<>(new PairDataType(DataType.STRING, DataType.STRING));
        c.key = "changes";
        c.name = "Zmiany";
        c.required = true;
        c.readOnly = true;
    });
    
    public final static Column<String> ADDRESS = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.STRING;
        c.key = "address";
        c.name = "Adres IP";
        c.readOnly = true;
    });
    
    public final static Column<String> SESSION = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.STRING;
        c.key = "session";
        c.name = "Sesja";
        c.readOnly = true;
    });
    
    public final static Column<String> USERNAME = new Column<>(c -> {
        c.repository = RRepoHistory.class;
        c.type = DataType.STRING;
        c.key = "username";
        c.name = "Użytkownik";
        c.readOnly = true;
    });
    
    public RRepoHistory() {
        super(c -> {
            c.key = "repoHistory";
            c.daoName = "repo_history";
            c.name = "Historia zmian";
            c.primaryKey = ID;
            c.displayName = NAME;
            c.crude.set(CRUDE.READ);
            //   c.onDemand = true;
        });
        instance = this;
        
    }
    
    public void fill(Record result, Record rec) {
        
        LinkedHashMap<String, Pair<String, String>> changes = new LinkedHashMap<>();
        Strings names = new Strings();
        
        rec.changed.forEach((Column<?> c, Pair<Object, Object> pair) -> {
            changes.put(c.getKey(), new Pair<>(Utils.escape(pair.first), Utils.escape(pair.second)));
            names.add(Utils.escape(c.config.name) + ": " + Utils.escape(pair.first)
                    + " -> " + Utils.escape(pair.second));
        });
        
        WebApiRequest req = ThreadObject.webApiReq.get();
        
        result.set(ACTION, rec.crude);
        result.set(NAME, names.toString(",\n"));
        result.set(REPOSITORY, rec.repo.getKey());
        result.set(PRIMARY_KEY, Utils.toString(rec.getPrimaryKeyValue()));
        result.set(USERNAME, "Root");
        if (req != null)
            result.set(ADDRESS, req.webSocket.connection.remoteAddress.toString().substring(1));
        result.set(CHANGES, changes);
        
    }
    
}
