package com.model;

import com.context.intf.ContextInitialized;
import com.model.repository.Column;
import com.model.repository.Record;
import com.model.repository.Repository;
import com.resources.FontAwesome;
import com.utils.Utils;
import com.utils.collections.Pair;
import com.utils.collections.Quad;
import com.utils.collections.Triple;
import com.utils.date.TDate;
import com.utils.reflections.datatype.*;
import java.util.UUID;

public class RTest extends Repository<Integer> {

    public final static String[] FORMATS = {"DOC", "PDF", "HTML", "CSS", "JS", "XML", "JSON"};

    public final static Column<Integer> ID = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.INT;
        c.key = "id";
        c.name = "ID";
        c.required = true;
        c.autoGenerated = true;
        c.readOnly = true;
        c.unique = true;
    });

    public final static Column<String> ONE_OF = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = EnumDataType.ofArray(FORMATS);
        c.key = "oneOf";
        c.name = "Jeden format";
    });

    public final static Column<String[]> SOME_OF = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = EnumsDataType.ofArray(FORMATS);
        c.key = "someOf";
        c.name = "Kilka formatów";
    });

    public final static Column<Pair<Boolean, String>> PAIR = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = new PairDataType<>(DataType.BOOLEAN, DataType.STRING);
        c.key = "pair";
        c.name = "Para";
    });

    public final static Column<Triple<Boolean, String, Integer>> TRIPLE = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = new TripleDataType<>(DataType.BOOLEAN, DataType.STRING, DataType.INT);
        c.key = "triple";
        c.name = "Potrójny";
    });

    public final static Column<Quad<Boolean, String, Integer, String>> QUADRO = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = new QuadDataType<>(DataType.BOOLEAN, DataType.STRING, DataType.INT, DataType.STRING);
        c.key = "quad";
        c.name = "Poczwórny";
    });

    public final static Column<Pair<Boolean, String>[]> PAIR_LIST = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = new ArrayDataType<>(new PairDataType<>(DataType.BOOLEAN, DataType.STRING));
        c.key = "pairList";
        c.name = "Lista par";
    });

    public final static Column<Triple<Boolean, String, Integer>[]> TRIPLE_LIST = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = new ArrayDataType<>(new TripleDataType<>(DataType.BOOLEAN, DataType.STRING, DataType.INT));
        c.key = "tripleList";
        c.name = "Lista potrójnych";
        c.daoName = null;
    });

    public final static Column<Quad<Boolean, String, Integer, String>[]> QUAD_LIST = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = new ArrayDataType<>(new QuadDataType<>(DataType.BOOLEAN,
                DataType.STRING, DataType.INT, DataType.STRING));
        c.key = "quadList";
        c.name = "Lista poczwórnych";
    });

    public final static Column<DataType> TYPE = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = new EnumDataType<DataType>(DataType.class, DataType.ALL.values(),
                dt -> dt.name,
                dt -> dt.description != null ? dt.description.toString() : dt.name);
        c.key = "type";
        c.name = "Typ danych";
    });

    public final static Column<String> TEST = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.STRING;
        c.key = "test";
        c.name = "Test";
        c.daoName = null;
        c.required = true;
        c.autoGenerated = true;
        c.readOnly = true;
    });

    public final static Column<UUID> UID = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.UUID;
        c.key = "uid";
        c.name = "UID";
        c.required = true;
        c.autoGenerated = true;
        c.readOnly = true;
        c.unique = true;
        c.hidden = true;
    });

    public final static Column<TDate> CREATED = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.TIMESTAMP;
        c.key = "created";
        c.name = "Utworzono";
        c.required = true;
        c.autoGenerated = true;
        c.readOnly = true;
    });

    public final static Column<String> KEY = new Column<String>(c -> {
        c.repository = RTest.class;
        c.type = DataType.KEY;
        c.key = "key";
        c.name = "Klucz";
        c.unique = true;
        c.required = true;
    });

    public final static Column<String> NAME = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.STRING;
        c.key = "name";
        c.name = "Nazwa";
        c.required = true;
    });
    /*
    public final static ForeignColumn<Integer, RCategory> PARENT = new ForeignColumn<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.INT;
        c.key = "parent";
        c.name = "Rodzic";
    }, RCategory.ID);

    public final static ForeignColumns<Integer, RAttributeElement> ELEMENTS = new ForeignColumns<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.INT.asArray();
        c.list = true;
        c.key = "elements";
        c.name = "Elementy";
    }, RAttributeElement.ID);

    public final static Column<String[]> DEF_VAL = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.STRING.asArray();
        c.list = true;
        c.daoName = "def_val";
        c.key = "defVal";
        c.name = "Wartość domyślna";
    });
     */

    public final static Column<Boolean[]> REQUIRED = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.BOOLEAN.asArray();
        c.key = "required";
        c.name = "Wymagane";
    });

    // ToDo Dodać repozytorium ikon
    public final static Column<String> ICON = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.STRING;
        c.key = "icon";
        c.name = "Ikona";
        c.required = true;
        c.defaultValue = Boolean.TRUE;
    });

    public final static Column<String> DESCRIPTION = new Column<>(c -> {
        c.repository = RTest.class;
        c.type = DataType.MEMO;
        c.key = "desc";
        c.daoName = "description";
        c.name = "Opis";
        c.max = 1000;
    });

    public RTest() {
        super(c -> {
            c.key = "test";
            c.daoName = null;
            c.name = "TEST";
            c.group = "Test";
            c.primaryKey = ID;
            c.displayName = NAME;

            c.repoAction("addR", "Dodaj", ActionType.PRIMARY, FontAwesome.PLUS, null, (repo, params) -> {

            });
            c.repoAction("remR", "Usuń", ActionType.WARNING, FontAwesome.TRASH, null, (repo, params) -> {

            });

            c.recordAction("raddR", "Dodaj", ActionType.PRIMARY, FontAwesome.PLUS, null, (repo, rec, params) -> {

            });
            c.recordAction("rremR", "Usuń", ActionType.PRIMARY, FontAwesome.TRASH, null, (repo, rec, params) -> {

            });
        });

        onBeforeUpdate.listen(this, (records, all) -> {
            for (Record rec : records)
                rec.set(TEST, getUpdatesCount() + " -> " + Utils.randomId()); //  rec.set(DESCRIPTION, getUpdatesCount() + " -> " + Utils.randomId());
        });

        localUpdate(null)
                .set(ID, 1)
                .set(ONE_OF, "XML")
                .set(SOME_OF, new String[]{"CSS", "JS"})
                .set(PAIR, new Pair<>(false, "dwa"))
                .set(TRIPLE, new Triple<>(true, "trzy", 3))
                .set(QUADRO, new Quad<>(false, "cztery", 4, "four"))
                .set(PAIR_LIST, new Pair[]{
            new Pair<>(false, "X"),
            new Pair<>(true, "Y"),
            new Pair<>(false, "Z")
        }).set(TRIPLE_LIST, new Triple[]{
            new Triple<>(false, "a", 10),
            new Triple<>(true, "b", 11),
            new Triple<>(false, "c", 12)
        }).set(QUAD_LIST, new Quad[]{
            new Quad<>(false, "1", 1, "jeden"),
            new Quad<>(true, "2", 2, "dwa"),
            new Quad<>(false, "3", 3, "trzy")
        }).update();

    }

}
