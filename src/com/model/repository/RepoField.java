package com.model.repository;

import com.intf.callable.CallableEx1;
import com.utils.reflections.DataType;
import com.utils.reflections.TClass;
import com.utils.reflections.TypeAdapter;

public class RepoField<RAW> {

    TClass<? extends Repository> repository;
    public final DataType<? extends RAW> type;
    public final Class<? extends RAW> clazz;
    public final String key;
    boolean isAutoGenerated;
    public final TypeAdapter<RAW> adapter;

    private Boolean sortOrder; // true - rosnący, false malejący
    private Boolean unique;
    private Boolean nullable;
    private DSColumnAlign align;
    private Boolean readOnly = false;
    private String description;
    private boolean autoGenerated = false;

    private CharSequence subtitle;
    private String foreignDataSet;
    private String foreignColumn;
    private Boolean disabled; // kolumna niewidoczna, zawiera daodatkowe dane, nie można jej wyświetliś
    private Boolean hidden; // kolumna niewidoczna domyslnie (można wyświetlić z menu kontekstowego)
    private Boolean sortable; // można sortować
    private Boolean editable;
    private Boolean filtered; // można filtrowac po tej kolumnie

    private String dateFormat;
    private String[] dateFormats;
    private Boolean searchable;

    public RepoField(DataType<? extends RAW> type, String key) {
        this(type, key, null);
    }

    public RepoField(DataType<? extends RAW> type, String key, CallableEx1<RAW, Object> setter) {
        this.type = type;
        this.clazz = (Class<? extends RAW>) type.clazz;
        this.key = key;
        this.adapter = new TypeAdapter<RAW>((Class<RAW>) this.clazz);
    }

    /**
     * Nazwa kolumny bazy danych
     */
    public String getStoreName() {
        return key;
    }

    /**
     * Typ danych wymagany w przypadku rzutowania
     */
    public String getStoreType() {
        return null;
    }

    public int getIndex() {
        return repository.newInstance(null).fields.indexOf(this);
    }

}
